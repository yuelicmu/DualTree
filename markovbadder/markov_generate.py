def markov_generate(chain, length, start = 0):
	## a function to generate random text with given Markov chain and length
	## 
	## Input:
	## chain: a Markov chain generated by the markov_train function
	## length: the desired length of the generated text
	## *start: the tokens to start with. If not provided then start at a random point.
	##
	## Output:
	## generate: a random text generated with given arguments.
	##
	## Author: Yue Li
    ## Date Created: 09/13/2017
    
    import random
    import numpy as np

    # check input arguments. start is now a tuple.
    n = len(list(chain.keys())[1])
    if start == 0:
    	startpoint = random.randint(0,len(chain.keys())-1)
    	start = tuple(chain.keys())[startpoint]
    elif isinstance(start, str):
    	start = tuple(sentence.split(' '))
    	if start not in chain:
    		raise ValueError('Input for start should be a string in the Markov chain.')
    else:
    	raise ValueError('Input for start should be 0 or string')

    if length < n:
    	return(start[0:length])

    # generate the text
    generate = start # a tuple
    father = start # a tuple
    for k in range(length-len(start)):
    	tokendic = chain[father]
    	new = tuple(np.random.choice(list(tokendic.keys()), 1, p = list(tokendic.values())))
    	father = father[1:] + new
    	generate = generate + new
    	if not father in chain:
    		father = list(chain.keys())[random.randint(0,n-1)]
    		generate = generate + tuple(father)
    		if len(generate) >= length:
    			return(generate[:length])
    return(generate)

if __name__=='__main__':
	from markov_train import markov_train
	from sentence_split import sentence_split
	sentence = 'A common way of generating random text is through a Markov chain, which represents text as a stochastic process. In a Markov chain, the probability of the next state depends only on the current state; for text generation, this means that the probability of each possible next word depends only on the current word.'
	sequence = sentence_split(sentence)
	chain = markov_train(sequence, 3)
	generate = markov_generate(chain, 100)
	print(' '.join(generate)+'\n')

